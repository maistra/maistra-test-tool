apiVersion: maistra.io/v2
kind: ServiceMeshControlPlane
metadata:
  name: west-mesh
  namespace: west-mesh-system
spec:
  version: {{ .Version }}
#  runtime:
#    defaults:
#      container:
#        # for testing, to ensure we're always using the latest dev image
#        imagePullPolicy: Always
  addons:
    grafana:
      enabled: false
    kiali:
      enabled: false
    prometheus:
      enabled: true   # must be enabled, so we can get istio_requests_total metric from the sidecar
  tracing:
    type: None
  proxy:
    accessLogging:
      file:
        name: /dev/stdout
  gateways:
    additionalEgress:
      # egress gateway definition for sending requests from east-mesh
      east-mesh-egress:
        enabled: true
        requestedNetworkView:
        # we want to view services on east-mesh's network
        - network-east-mesh
        routerMode: sni-dnat
        service:
          metadata:
            labels:
              # to prevent east-mesh-egress's service from including default egress pods
              federation.maistra.io/egress-for: east-mesh
          ports:
          # required for sending service requests to east-mesh
          - port: 15443
            name: tls
          # required for sending discovery requests to east-mesh
          - port: 8188
            name: http-discovery
        runtime:
          deployment:
            autoScaling:
              enabled: false
          container:
            # constrain resources for use in smaller environments
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits: {}
    additionalIngress:
      # ingress gateway definition for handing requests from east-mesh
      east-mesh-ingress:
        enabled: true
        routerMode: sni-dnat
        service:
          type: {{ .IngressServiceType }}
          metadata:
            labels:
              # to prevent east-mesh-ingress's service from including default ingress pods
              federation.maistra.io/ingress-for: east-mesh
            annotations:
              # use the network load balancer on AWS
              service.beta.kubernetes.io/aws-load-balancer-type: nlb
          ports:
          # required for handling service requests from east-mesh
          - port: 15443
            name: tls
          # required for handing discovery requests from east-mesh
          - port: 8188
            name: https-discovery
        runtime:
          deployment:
            autoScaling:
              enabled: false
          container:
            # constrain resources for use in smaller environments
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits: {}
  security:
    identity:
      type: ThirdParty
    trust:
      # unique trust domain for this mesh, west-mesh
      domain: west-mesh.local
    dataPlane:
      mtls: true
    certificateAuthority:
      type: Istiod
      istiod:
        type: PrivateKey
        privateKey:
          rootCADir: /etc/cacerts
